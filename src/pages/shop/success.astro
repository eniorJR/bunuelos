---
import Layout from "../../layouts/Layout.astro";

// Get the session ID from the URL query parameter
const sessionId = Astro.url.searchParams.get("session_id");
---

<Layout title="Pedido Completado | Buñuelos">
  <main class="min-h-screen bg-amber-50 py-16">
    <div class="container mx-auto px-4 max-w-3xl text-center">
      <div class="bg-white rounded-lg shadow-lg p-8 mb-8">
        <div class="flex justify-center mb-6">
          <div class="bg-green-100 p-4 rounded-full">
            <div class="text-green-600 text-5xl">✓</div>
          </div>
        </div>

        <h1 class="text-3xl font-bold text-amber-800 mb-4">
          ¡Gracias por tu pedido!
        </h1>

        <p class="text-lg text-gray-700 mb-6">
          Tu pedido ha sido procesado correctamente. Hemos enviado un correo
          electrónico con los detalles de tu compra.
        </p>

        <div class="bg-amber-100 p-4 rounded-lg mb-8">
          <h2 class="text-xl font-semibold text-amber-800 mb-2">
            Información importante
          </h2>
          <p class="text-gray-700">
            Recibirás tu pedido en un plazo de 2 a 5 días laborables. Si tienes
            alguna pregunta, no dudes en contactarnos.
          </p>
        </div>

        <div class="flex flex-col sm:flex-row justify-center gap-4">
          <a
            href="/shop"
            class="bg-amber-600 hover:bg-amber-700 text-white font-bold py-3 px-6 rounded-lg transition-colors"
          >
            Seguir comprando
          </a>
          <a
            href={`/shop/order?id=${sessionId?.substring(sessionId?.length - 12, sessionId?.length) || ""}`}
            class="bg-white border-2 border-amber-600 hover:bg-amber-100 text-amber-800 font-bold py-3 px-6 rounded-lg transition-colors"
          >
            Ver detalles del pedido
          </a>
          <a
            href="/"
            class="bg-white border-2 border-amber-600 hover:bg-amber-100 text-amber-800 font-bold py-3 px-6 rounded-lg transition-colors"
          >
            Volver al inicio
          </a>
        </div>
      </div>

      <div class="text-center text-gray-600">
        <p>¿Tienes alguna pregunta sobre tu pedido?</p>
        <p class="font-medium">
          Contáctanos en <a
            href="mailto:info@bunuelos.es"
            class="text-amber-700 underline">hola@buñuelo.es</a
          >
        </p>
      </div>
    </div>
  </main>

  <!-- EmailJS Script -->
  <script
    type="text/javascript"
    src="https://cdn.jsdelivr.net/npm/@emailjs/browser@3/dist/email.min.js"
  ></script>
  <script define:vars={{ sessionId }}>
    (function () {
      // Initialize EmailJS with your public key
      emailjs.init("3VcJYPKng4TG9_2rW");

      // Clear the shopping cart on successful order
      function clearCart() {
        try {
          // Clear cart items from localStorage
          localStorage.removeItem("cartItems");
          localStorage.removeItem("cartTotal");
          console.log("Shopping cart cleared successfully");
        } catch (error) {
          console.error("Error clearing shopping cart:", error);
        }
      }

      // Function to fetch order details from Stripe using the session ID
      async function fetchOrderDetails() {
        if (!sessionId) return;
        try {
          // Clear the cart immediately when we have a valid session ID

          // Fetch order details from your backend
          const response = await fetch(`/api/groute?session_id=${sessionId}`, {
            method: "GET",
            headers: {
              "Content-Type": "application/json",
            },
          });
          const orderData = await response.json();

          if (orderData && orderData.customerEmail) {
            // Extract products from the order data
            let itemsTable = "";

            // Check if we have products in the metadata
            const productKeys = Object.keys(orderData).filter(
              (key) =>
                key.includes("product") ||
                key.includes("item") ||
                key.includes("line")
            );

            if (productKeys.length > 0) {
              // We found product-related keys, let's build a table
              const tableRows = productKeys
                .map((key) => {
                  let productName = "";
                  let productPrice = "";

                  // Try to extract product name and price
                  if (typeof orderData[key] === "string") {
                    if (orderData[key].includes(":")) {
                      [productName, productPrice] = orderData[key]
                        .split(":")
                        .map((s) => s.trim());
                    } else {
                      productName = orderData[key];
                    }
                  } else if (typeof orderData[key] === "object") {
                    productName =
                      orderData[key].name || orderData[key].description || key;
                    productPrice =
                      orderData[key].price || orderData[key].amount || "";
                  }

                  // Ensure price has € symbol
                  if (productPrice && !productPrice.includes("€")) {
                    productPrice += "€";
                  }

                  return `<tr style="border-bottom: 1px solid #e2e8f0;">
                  <td style="padding: 10px;">${productName || key}</td>
                  <td style="padding: 10px; text-align: right;">${productPrice || ""}</td>
                </tr>`;
                })
                .join("");

              itemsTable = generateTableWithTotals(tableRows, orderData);
            } else {
              // Fallback: Create a simple table with just the total
              itemsTable = `<table style="width: 100%; border-collapse: collapse; margin-top: 10px;">
                <thead>
                  <tr style="background-color: #f8fafc; border-bottom: 2px solid #3498db;">
                    <th style="padding: 10px; text-align: left;">Resumen</th>
                    <th style="padding: 10px; text-align: right;">Precio</th>
                  </tr>
                </thead>
                <tbody>
                  <tr style="border-bottom: 1px solid #e2e8f0;">
                    <td style="padding: 10px;">Productos</td>
                    <td style="padding: 10px; text-align: right;">${orderData.subtotal || "0.00"}€</td>
                  </tr>
                  <tr style="background-color: #f8fafc;">
                    <td style="padding: 10px; font-weight: bold;">Subtotal</td>
                    <td style="padding: 10px; text-align: right;">${orderData.subtotal || "0.00"}€</td>
                  </tr>
                  <tr style="background-color: #f8fafc;">
                    <td style="padding: 10px; font-weight: bold;">Envío</td>
                    <td style="padding: 10px; text-align: right;">${orderData.shipping || "0.00"}€</td>
                  </tr>
                  <tr style="background-color: #f8fafc;">
                    <td style="padding: 10px; font-weight: bold;">IVA (21%)</td>
                    <td style="padding: 10px; text-align: right;">${orderData.tax || "0.00"}€</td>
                  </tr>
                  <tr style="background-color: #ebf8ff; font-weight: bold;">
                    <td style="padding: 12px; font-size: 16px;">Total</td>
                    <td style="padding: 12px; text-align: right; font-size: 16px; color: #3498db;">${orderData.total || "0.00"}€</td>
                  </tr>
                </tbody>
              </table>`;
            }

            // Template for customer email
            const customerTemplateParams = {
              to_email: orderData.customerEmail,
              to_name: orderData.customerName || "Cliente",
              order_id: sessionId.substring(
                sessionId.length - 12,
                sessionId.length
              ),
              order_link: `${window.location.origin}/shop/order?id=${sessionId.substring(sessionId.length - 12, sessionId.length)}`,
              order_date: new Date().toLocaleDateString("es-ES"),
              order_total: orderData.total || "0.00",
              shipping_address: orderData.customerAddress || "",
              estimated_delivery: "2-5 días laborables",
              subtotal: orderData.subtotal || "0.00",
              shipping: orderData.shipping || "0.00",
              tax: orderData.tax || "0.00",
              items_table: itemsTable,
            };
            console.log(
              "Customer email template params:",
              customerTemplateParams
            );
            // Send email to customer
            emailjs
              .send(
                "service_vb6fqei",
                "template_mjfbydg",
                customerTemplateParams
              )
              .then(
                function (response) {
                  console.log("Customer email sent successfully:", response);
                },
                function (error) {
                  console.error("Failed to send customer email:", error);
                }
              );
          }
          clearCart();
        } catch (error) {
          console.error("Error fetching order details:", error);
        }
      }

      // Common function to generate the full table with totals
      function generateTableWithTotals(tableRows, data) {
        return `<table style="width: 100%; border-collapse: collapse; margin-top: 10px;">
          <thead>
            <tr style="background-color: #f8fafc; border-bottom: 2px solid #3498db;">
              <th style="padding: 10px; text-align: left;">Producto</th>
              <th style="padding: 10px; text-align: right;">Precio</th>
            </tr>
          </thead>
          <tbody>
            ${tableRows}
            <tr style="background-color: #f8fafc;">
              <td style="padding: 10px; font-weight: bold;">Subtotal</td>
              <td style="padding: 10px; text-align: right;">${data.subtotal || "0.00"}€</td>
            </tr>
            <tr style="background-color: #f8fafc;">
              <td style="padding: 10px; font-weight: bold;">Envío</td>
              <td style="padding: 10px; text-align: right;">${data.shipping || "0.00"}€</td>
            </tr>
            <tr style="background-color: #f8fafc;">
              <td style="padding: 10px; font-weight: bold;">IVA (21%)</td>
              <td style="padding: 10px; text-align: right;">${data.tax || "0.00"}€</td>
            </tr>
            <tr style="background-color: #ebf8ff; font-weight: bold;">
              <td style="padding: 12px; font-size: 16px;">Total</td>
              <td style="padding: 12px; text-align: right; font-size: 16px; color: #3498db;">${data.total || "0.00"}€</td>
            </tr>
          </tbody>
        </table>`;
      }

      // Call the function when the page loads
      document.addEventListener("DOMContentLoaded", fetchOrderDetails);
    })();
  </script>
</Layout>
